# -*- coding: utf-8 -*-
"""ExchangeCourseReader.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/121TRcGRrvfsvk87RU9r7kjOWE2WsCaoJ
"""

###Part 1 Inspect File





import PyPDF2
import textract


# file_name = input("Name of the file. Type here: ")
file_name = "Test_example2.pdf"

# first of all open the pdf file
pdfFile_object = open(file_name, "rb")
print("The document to be read is: " + str(file_name))

# and making it readable by python
reader = PyPDF2.PdfFileReader(pdfFile_object)

# to create the loop and string we need some preparation
num_pages = reader.numPages
print("The number of pages is: " + str(num_pages))
count_pages = 0
text = ""

# the loop reads through all the pages and return the text in a string
while count_pages < num_pages:
    page_to_read = reader.getPage(count_pages)
    count_pages += 1
    text += page_to_read.extractText()

pdfFile_object.close()

if text != "":
    text = text
else:
    print("I have found no words")
    # This doesn't work (see next line)
    # text = textract.process(, method='tesseract', language='eng')

characters_to_remove = [",", ".", "\n", "\n\n", "\t", "  ", "   ", "(", ")"]
for character in characters_to_remove:
    text = text.replace(character, " ")

print(text)



####Part 2 Keyword definitions

####THe following lists are to be used for Keyword searching: 
# de denotes the "Deutsch"- Track
# en denotes the "English" Track
# den denotes Tracks that are in both languages
##General lists to find info on course structures:
general_de = ["pflichtveranstaltung", "pflichtfach", "pflichtwahl", "wahlbereich", "kontextstudium", "fokusbereich", "sprachen", "skills", "reko"]

general_en = ["Core studies", "Compulsory subjects", "Contextual Studies", "Languages", "Skills "]

###Alternative Search Keywords: 
alt_list = ["Kurse", "Study", "Academics", "ECTS", "Kursname"]

###Lists for the Business Students (According to the new Study Order: https://universitaetstgallen.sharepoint.com/sites/BachelorDE/SitePages/BWL-Curriculum.aspx) 

bbwl_de = ["mikroökonomik", "makroökonomik", "statistik", "leadership& human resource management", "strategisches management", "management" "empirische sozialforschung", "marketing"\
           "corporate finance", "finance", "accounting", "controlling", "auditing", "operations-management", "wirtschafts& und steuerrecht", "informatik für wirtschaftswissenschaftler"\
           "methoden der informatik für wirtschaftswissenschaftler"]

bbwl_en = ["Business and Fiscal Law", "Introduction to Operations Management", "Accounting, Controlling, Auditing", "Corporate Finance",\
           "Methods of Informatics for Business Studies", "Fundamentals of Informatics for Business Studies", "Microeconomics", "Macroeconomics", "Statistics",\
           "Leadership& Human Resource Management", "Strategic Management", "Social Science Research", "Marketing"]

###List for the International Affairs Students : https://universitaetstgallen.sharepoint.com/sites/BachelorDE/SitePages/BIA-Curriculum-und-Reform-O20.aspx
bia_den = ["Quantitative Methods", "Quantitative Methoden", "Mikroökonomik", "Microeconomics", "Comparative Politics", "Vergleichende Politikwissenschaft", "Politische Theorie"\
           "Public Management", "Qualitative Methoden", "Qualitative Methods", "International Economics", "European Governance", "Regieren in Europa", "International Relations"\
           "Macroeconomics", "Makroökonomik", "International Law", "Accounting, Controlling, Auditing"]

### Lists for the Economics Students: https://universitaetstgallen.sharepoint.com/sites/BachelorDE/SitePages/VWL-Ordnung%2019.aspx
bvwl_de = ["Data Handling: Cleaning, Import and Visualization", "Data Analytics: Statistik", "Makroökonomik 2 ", "Mikroökonomik 2", "Accounting, Controlling, Auditing",\
            "Empirische Wirtschaftsforschung", "Makroökonomik 3", "Mikroökonomik 3"]

bvwl_en = ["Data Handling: Cleaning, Import and Visualization", "Data Analytics: Statistics", "Macroeconomics 2 ", "Microeconomics 2", "Accounting, Controlling, Auditing",\
            "Empirical Economic Research", "Macroeconomics 3", "Microeconomics 3"]

###List for the Law & Economics Students: https://universitaetstgallen.sharepoint.com/sites/BachelorDE/SitePages/BLE-Austausch.aspx
ble_de = ["Internationales Recht", "Juristische Wahlfächer", "Integrationsleistungen", "Law & Economics Methode", "Law & Economics Methode 2"]

### List for the Law Students: https://universitaetstgallen.sharepoint.com/sites/BachelorDE/SitePages/BLaw-Austausch.aspx
blaw = ["Privatrecht-Wirtschaftsrecht", "Verwaltungsrecht IIÖffentliches Wirtschaftsrecht", "Öffentliches Recht", "Strafrecht BT", "Internat. Privatrecht ",\
        "Völkerrecht", "Europarecht", "Rechtsgeschichte"]

####Patchwork: Get the string into a list
#list1 = list(text.split(" ")) 
#print(list1)

###Part 3 Keyword Search

#####Idea Start

def search_string_for_keyword(text, keyword):
  if keyword in text:
    return True
  else: 
    return False

text = text.lower()

catalogue = bbwl_de

search_string_for_keyword(text, "strategisches management")

for item in general_de:
  if search_string_for_keyword(text, item) == True:
    print(item)

for course in catalogue:
  if search_string_for_keyword(text, course) == True:
    print(course)

####IDEA OVER

def open_file(file_name):
  # If file is a .txt
  file_content = open(file_name, "r") 
  return file_content

def search_keyword(file_content, keyword):
  # if file_content is a string, then the single words must be separated.
  # if file_content is a list of words, we can save the position of the words in the list.
  
  list_position = []        # Create an empty list of positions for a keyword.

  for a in range(0, len(file_content)): # We iterate over all indexes of the list.
      b = file_content[a]               # We save under the name b the content (string) at the index (position) a
      if keyword == b:                  # If we find an element which is equal to the keyword please do following:
        list_position.append(a)         # We store the position (index) of the keyword in a list which gathers all the positions
      else:
          return None
  quantity_positions = len(list_position) # We define, using the amount of indexed positions, how many times the keyword has been found.
  print("The keyword you are searching for, is to be found at position(s)", list_position, "in this file." ) # Print the information for the user
  print("The keyword you are searching for, has been found", quantity_positions, "times.")
  return list_position                    # Return the values that can be used by the next function
  return quantity_positions



######################## TEST ########################
#list = ["apple", "orange", "pear","apple", "orange", "pear","apple", "orange", "pear","apple", "orange", "pear","apple", "orange", "pear","apple", "orange", "pear",]
#keyword = "orange"

search_keyword(list1, "Management") # We test the function with the 2 arguments

